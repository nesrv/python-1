# Метод zfill() возвращает копию строки с заполненным 0 слева. Длина возвращаемой строки зависит от предоставленной ширины:

x = '123'
y = x.zfill(5)
print(y)

x = '-123'
y = x.zfill(6)
print(y)


# Пример 2: Как работает с префиксом знака?

x = '--123'
y = x.zfill(6)
print(y)


# removeprefix		Удаляет заданную последовательность символов prefix в начале строки.
# removesuffix		Удаляет заданную последовательность символов suffix в конце строки.

y = y.removeprefix('-0')
print(y)

# если нам потребуется выполнить сравнение строк без учета их регистра? Да, конечно же, мы можем предварительно перевести сравниваемые строки в нижний, или наоборот, в верхний регистр и, только потом пытаться их сравнивать. Но, зачем же так усложнять себе жизнь, если мы просто на просто можем воспользоваться, отдельно предназначенным для таких ситуаций, строковым методом casefold():

strana = "Канада"
sravneniye1 = "к" in strana
print(sravneniye1)

# False

sravneniye2 = "к" in strana.casefold()
print(sravneniye2)

# True


# Метод splitlines
# Основной особенностью метода splitlines() является то, что он предназначен сугубо для разбиения строк на подстроки.

text = "Я - Никто!\nКто же ты?\nНаверняка, тоже Никто?"
text_new = text.splitlines()
print(text_new)

# ['Я - Никто!', 'Кто же ты?', 'Наверняка, тоже Никто?']


def my_func(x: int) -> str:
    return x ** 0.5


if __name__ == '__main__':
    print(my_func(5))
